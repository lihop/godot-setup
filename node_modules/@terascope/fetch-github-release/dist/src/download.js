"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = void 0;
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const url_1 = __importDefault(require("url"));
const { GITHUB_TOKEN } = process.env;
function getRequestOptions(urlString) {
    const url = url_1.default.parse(urlString);
    const headers = {
        Accept: 'application/octet-stream',
        'User-Agent': '@terascope/fetch-github-release',
    };
    if (GITHUB_TOKEN) {
        headers.Authorization = `token ${GITHUB_TOKEN}`;
    }
    return Object.assign({}, url, { headers });
}
function download(url, w, progress = () => { }) {
    return new Promise((resolve, reject) => {
        let protocol = /^https:/.exec(url) ? https_1.default : http_1.default;
        const options = getRequestOptions(url);
        progress(0);
        protocol
            .get(options, (res1) => {
            protocol = /^https:/.exec(res1.headers.location) ? https_1.default : http_1.default;
            protocol
                .get(res1.headers.location, (res2) => {
                var _a;
                const total = parseInt((_a = res2.headers['content-length']) !== null && _a !== void 0 ? _a : '0', 10);
                let completed = 0;
                res2.pipe(w);
                res2.on('data', (data) => {
                    completed += data.length;
                    progress(completed / total);
                });
                res2.on('progress', progress);
                res2.on('error', reject);
                res2.on('end', resolve);
            })
                .on('error', reject);
        })
            .on('error', reject);
    });
}
exports.download = download;
//# sourceMappingURL=download.js.map