"use strict";

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.object.define-property.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = download;

require("core-js/modules/es.object.assign.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.parse-int.js");

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var _url = _interopRequireDefault(require("url"));

var _package = require("../package.json");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var GITHUB_TOKEN = process.env.GITHUB_TOKEN;

function getRequestOptions(urlString) {
  var url = _url["default"].parse(urlString);

  var headers = {
    Accept: 'application/octet-stream',
    'User-Agent': _package.name
  };

  if (GITHUB_TOKEN) {
    headers.Authorization = "token ".concat(GITHUB_TOKEN);
  }

  return Object.assign({}, url, {
    headers: headers
  });
}

function download(url, w) {
  var progress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
  return new Promise(function (resolve, reject) {
    var protocol = /^https:/.exec(url) ? _https["default"] : _http["default"];
    var options = getRequestOptions(url);
    progress(0);
    protocol.get(options, function (res1) {
      protocol = /^https:/.exec(res1.headers.location) ? _https["default"] : _http["default"];
      protocol.get(res1.headers.location, function (res2) {
        var total = parseInt(res2.headers['content-length'], 10);
        var completed = 0;
        res2.pipe(w);
        res2.on('data', function (data) {
          completed += data.length;
          progress(completed / total);
        });
        res2.on('progress', progress);
        res2.on('error', reject);
        res2.on('end', resolve);
      }).on('error', reject);
    }).on('error', reject);
  });
}
