"use strict";

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.object.define-property.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getReleases;

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.array.concat.js");

var _got = _interopRequireDefault(require("got"));

var _package = require("../package.json");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var GITHUB_TOKEN = process.env.GITHUB_TOKEN;

function getReleases(_x, _x2) {
  return _getReleases.apply(this, arguments);
}

function _getReleases() {
  _getReleases = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(user, repo) {
    var url, requestConfig, r;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            url = "https://api.github.com/repos/".concat(user, "/").concat(repo, "/releases");
            requestConfig = {
              headers: {
                'User-Agent': _package.name
              },
              responseType: 'json'
            };

            if (GITHUB_TOKEN) {
              requestConfig.headers.Authorization = "token ".concat(GITHUB_TOKEN);
            }

            _context.next = 5;
            return _got["default"].get(url, requestConfig);

          case 5:
            r = _context.sent;
            return _context.abrupt("return", r.body);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getReleases.apply(this, arguments);
}
